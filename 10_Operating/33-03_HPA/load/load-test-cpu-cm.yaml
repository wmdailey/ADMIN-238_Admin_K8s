# Exercise: 33-03 v3.2.0
# This Kubernetes ConfigMap contains a k6 soak test. 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-cpu
data:
  load-test-cpu.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    // Test options: define the number of virtual users (VUs) and the duration of the test.
    export let options = {
      // Use a increasing number of virtual users for a brief period to see the effect.
      // This should be used to determine the maximum number of users for the application.
      // Do not run hpa during load testing. 
      vus: 40,
      duration: '30s',
    };
    
    // The main function where the virtual user's actions are defined.
    // k6 will run this function for each virtual user.
    export default function () {
      // Make an HTTP GET request to the heavy-task endpoint.
      // The URL assumes your container is running and its internal port 3000 is mapped
      // to your host's port 8888, as per the `docker run` command in the previous response.
      const res = http.get('http://test-cpu.default.svc.clustr.local:8080/test-cpu');

      // Perform a check to ensure the request was successful.
      // This helps identify any errors during the load test.
      check(res, {
        'status is 200': (r) => r.status === 200,
    });

    // Pause the virtual user for a short time to simulate user think time.
    // This is a good practice to prevent overwhelming the server with requests.
    sleep(1);
    }

